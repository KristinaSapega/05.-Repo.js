//1
/* Дан массив: 
[1, 5, 4, 10, 0, 3]
Необходимо создать цикл, который будет выводить элементы массива 
до тех пор, пока не встретит значение 10.
После вывода значения 10 в консоль цикл должен прекратить свою работу.*/

const numbs = [1, 5, 4, 10, 0, 3];
for (let i = 0; i < numbs.length; i++) {
    if (numbs[i] === 10) {
    console.log(numbs[i]);
    break;
}
  console.log(numbs[i]);
}


//2
/* Дан массив: 
[1, 5, 4, 10, 0, 3].
Найдите позицию числа 4 в этом массиве.*/

const numbs2 = [1, 5, 4, 10, 0, 3];
const index = numbs2.indexOf(4);
console.log(index);

вар.2
const numbs2 = [1, 5, 4, 10, 0, 3];
let index = -1;
numbs2.forEach((el, i) => {
  if (el === 4) { 
    index = i; 
  }
});
console.log(index); 


//3
/*Дан массив чисел: [1, 3, 5, 10, 20].
С помощью метода join выведите элементы массива
через пробел (пустую строку ' ').*/

let numbs3 = [1, 3, 5, 10, 20];
numbs3 = numbs3.join(' ');
console.log(numbs3);

//4
/*С помощью вложенных циклов создайте многомерный массив вида: 
[[1, 1, 1], [1, 1, 1], [1, 1, 1]].*/

const arr = [];
for (let i = 0; i < 3; i++) {
    arr [i] = [];
    for (let j = 0; j < 3; j++) {
        arr[i][j] = 1;
    }
}
console.log(arr);

В многомерном массиве каждый элемент имеет два индекса - 
первый для указания строки, в которой находится элемент, 
а второй для указания столбца, в котором он находится.
В данном коде i и j - это переменные, которые используются для обращения 
к элементам массива. Внешний цикл for проходит по строкам массива 
и использует переменную i в качестве индекса строки, 
а вложенный цикл проходит по столбцам массива и использует переменную j 
в качестве индекса столбца.
Таким образом, i и j - это просто обычные переменные, используемые 
для итерации по многомерному массиву.

i < 3 используется как условие для внешнего цикла for. 
Это означает, что цикл будет выполняться до тех пор, пока значение переменной i 
меньше 3. Поскольку многомерный массив, который мы создаем, имеет 3 строки, 
то условие i < 3 гарантирует, что мы пройдем по каждой строке массива. 
Если бы мы указали i < 2 или i < 4, то мы либо не обошли бы все строки массива,
либо пройдем по строке, которой на самом деле нет в нашем массиве.
Конечно, условие i < 3 может быть заменено на другое, 
если требуется создать многомерный массив другой размерности. 
Например, если мы хотим создать многомерный массив с 4 строками, 
мы можем изменить условие на i < 4.

//5
/* Дан массив: [1, 1, 1].
Добавьте в конец массива значения 2, 2, 2.*/

let arr2 = [1, 1, 1];
arr2.push (2, 2, 2);
console.log(arr2);

//6
/*Дан массив: [9, 8, 7, 'a', 6, 5].
С помощью метода sort отсортируйте массив и удалите букву 'a' из данного массива.
В результате работы программы вывести массив, состоящий из цифр.*/

let arr3 = [9, 8, 7, 'a', 6, 5];
arr3.sort ();
arr3.pop ();
console.log(arr3);

//7
/*Дан массив: [9, 8, 7, 6, 5].
Пользователь с клавиатуры вводит число от 1 до 10 (использовать prompt()). 
Необходимо проверить, содержится ли введенное пользователем число в 
данном массиве.*/

const numbers = [9, 8, 7, 6, 5];
const input = Number(prompt('Введите число от 1 до 10:'));
if (numbers.includes (input)) {
  console.log (`Число ${input} есть в массиве`);            
} else {
  console.log (`Число ${input} отсутсвует в массиве`);
}


//8

